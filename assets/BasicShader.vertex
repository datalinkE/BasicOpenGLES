// Constants.
uniform mat4 u_MVPMatrix;   // Combined model/view/projection matrix.
uniform mat4 u_MVMatrix;    // Combined model/view matrix.
uniform mediump vec3 u_LightPos;    // Position of the light in eye space.
//TODO: find out why eye space

// Buffer input. Per-vertex values.
attribute vec4 a_Position;
attribute vec4 a_Color;
attribute vec3 a_Normal;
attribute vec2 a_TexCoordinate;

// Output. All this will be passed into the fragment shader.
varying vec4 v_Color;
varying vec3 v_Normal;
varying vec3 v_Position;
varying float v_Distance;
varying vec2 v_TexCoordinate;

void main()
{
    v_Position = vec3(u_MVMatrix * a_Position);
    v_Normal = vec3(u_MVMatrix * vec4(a_Normal, 0.0));
    v_Distance = length(u_LightPos - v_Position);
    v_Color = a_Color;
    v_TexCoordinate = a_TexCoordinate;
    gl_Position = u_MVPMatrix * a_Position;
}